from psychopy import visual, clock
from psychopy.constants import (NOT_STARTED, STARTED, PLAYING, PAUSED,
                                STOPPED, FINISHED, PRESSED, RELEASED, FOREVER)
import numpy as np 
from itertools import product

stimGridSize = 800 # width and height of the grid
answerGridSize = 200 
gridXY = 6 # number of cells per axis -> number of cells = gridXY**2
colour = np.array([-0.4,-0.4,-0.4])

# Stim Grid
# Note that I have been changing the coordinates by (1) adding parenthases around stim and answer GridCoordinates, and (2) adding or subtracting values
# To return to normal simply remove the modifiers above, and everything will be centered again
cellCoordinates = stimGridSize/gridXY*(gridXY-1)/2
cellCoordinates = np.asarray(list(product(np.linspace(-cellCoordinates,cellCoordinates,gridXY),repeat=2)))
stimGridCoordinates = np.asarray([(l-300,0) for l in  np.linspace((-stimGridSize)/2,(stimGridSize)/2,gridXY+1)] + [(-300,l) for l in np.linspace((-stimGridSize)/2,(stimGridSize)/2,gridXY+1)])
gridAngles = [90]*(gridXY+1) + [0]*(gridXY+1)

# Answer Grid 
answerCellCoordinates = answerGridSize/gridXY*(gridXY-1)/2
answerCellCoordinates = np.asarray(list(product(np.linspace(-cellCoordinates,cellCoordinates,gridXY),repeat=2)))
answerGrid1Coordinates = np.asarray([(h+500,0) for h in  np.linspace((-answerGridSize)/2,(answerGridSize)/2,gridXY+1)] + [(500,h) for h in np.linspace((-answerGridSize)/2,(answerGridSize)/2,gridXY+1)])
answerGrid2Coordinates = np.asarray([(h+500,250) for h in  np.linspace((-answerGridSize)/2,(answerGridSize)/2,gridXY+1)] + [(500,h+250) for h in np.linspace((-answerGridSize)/2,(answerGridSize)/2,gridXY+1)])
answerGrid3Coordinates = np.asarray([(h+500,-250) for h in  np.linspace((-answerGridSize)/2,(answerGridSize)/2,gridXY+1)] + [(500,h-250) for h in np.linspace((-answerGridSize)/2,(answerGridSize)/2,gridXY+1)])
gridAngles = [90]*(gridXY+1) + [0]*(gridXY+1)

# Visual
win = visual.Window([1536, 864],winType='pyglet',screen=1,monitor='External Monitor HD',units='pix',fullscr = True, autoLog=False, gammaErrorPolicy='ignore')
win.mouseVisible = False

stimGrid = visual.ElementArrayStim(win=win, name='stimGrid', nElements=(gridXY+1)*2, sizes=[stimGridSize,2], xys = stimGridCoordinates, oris=gridAngles, units='pix', 
            elementTex=np.ones([16,16]), elementMask=np.ones([16,16]), colors=colour, colorSpace='rgb', autoLog=False)

answerGrid1 = visual.ElementArrayStim(win=win, name='answerGrid1', nElements=(gridXY+1)*2, sizes=[answerGridSize,2], xys = answerGrid1Coordinates, oris=gridAngles, units='pix', 
            elementTex=np.ones([16,16]), elementMask=np.ones([16,16]), colors=colour, colorSpace='rgb', autoLog=False)

answerGrid2 = visual.ElementArrayStim(win=win, name='answerGrid2', nElements=(gridXY+1)*2, sizes=[answerGridSize,2], xys = answerGrid2Coordinates, oris=gridAngles, units='pix', 
            elementTex=np.ones([16,16]), elementMask=np.ones([16,16]), colors=colour, colorSpace='rgb', autoLog=False)

answerGrid3 = visual.ElementArrayStim(win=win, name='answerGrid3', nElements=(gridXY+1)*2, sizes=[answerGridSize,2], xys = answerGrid3Coordinates, oris=gridAngles, units='pix', 
            elementTex=np.ones([16,16]), elementMask=np.ones([16,16]), colors=colour, colorSpace='rgb', autoLog=False)

stimGrid.draw()
answerGrid1.draw()
answerGrid2.draw()
answerGrid3.draw()
win.flip()
clock.wait(5)
